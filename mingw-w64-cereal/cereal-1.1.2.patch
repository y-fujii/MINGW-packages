diff -c -r cereal-1.1.2.orig/CMakeLists.txt cereal-1.1.2/CMakeLists.txt
*** cereal-1.1.2.orig/CMakeLists.txt	2015-06-08 15:13:21.000000000 -0300
--- cereal-1.1.2/CMakeLists.txt	2016-03-13 15:42:03.966955000 -0300
***************
*** 35,37 ****
--- 35,40 ----
      )
  
  endif(DOXYGEN_FOUND)
+ 
+ # installation of public headers
+ install(DIRECTORY include/cereal DESTINATION ${CMAKE_INSTALL_PREFIX}/include)
diff -c -r cereal-1.1.2.orig/include/cereal/archives/json.hpp cereal-1.1.2/include/cereal/archives/json.hpp
*** cereal-1.1.2.orig/include/cereal/archives/json.hpp	2015-06-08 15:13:21.000000000 -0300
--- cereal-1.1.2/include/cereal/archives/json.hpp	2016-03-13 15:43:15.811920400 -0300
***************
*** 615,621 ****
  
        // Special cases to handle various flavors of long, which tend to conflict with
        // the int32_t or int64_t on various compiler/OS combinations.  MSVC doesn't need any of this.
!       #ifndef _MSC_VER
      private:
        //! 32 bit signed long loading from current node
        template <class T> inline
--- 615,621 ----
  
        // Special cases to handle various flavors of long, which tend to conflict with
        // the int32_t or int64_t on various compiler/OS combinations.  MSVC doesn't need any of this.
!       #if not defined(_MSC_VER) && not defined(__MINGW32__)
      private:
        //! 32 bit signed long loading from current node
        template <class T> inline
diff -c -r cereal-1.1.2.orig/unittests/CMakeLists.txt cereal-1.1.2/unittests/CMakeLists.txt
*** cereal-1.1.2.orig/unittests/CMakeLists.txt	2015-06-08 15:13:21.000000000 -0300
--- cereal-1.1.2/unittests/CMakeLists.txt	2016-03-13 15:42:03.982581300 -0300
***************
*** 5,17 ****
  
  # Build the portability test only if we are on a 64-bit machine (void* is 8 bytes)
  if((${CMAKE_SIZEOF_VOID_P} EQUAL 8) AND (NOT SKIP_PORTABILITY_TEST))
!   add_executable(portability_test32 portability_test.cpp)
!   set_target_properties(portability_test32 PROPERTIES COMPILE_FLAGS "-m32")
!   set_target_properties(portability_test32 PROPERTIES LINK_FLAGS "-m32")
! 
!   add_executable(portability_test64 portability_test.cpp)
! 
!   add_test(NAME portability_test COMMAND "${CMAKE_CURRENT_SOURCE_DIR}/run_portability_test.sh")
  
  endif()
  
--- 5,15 ----
  
  # Build the portability test only if we are on a 64-bit machine (void* is 8 bytes)
  if((${CMAKE_SIZEOF_VOID_P} EQUAL 8) AND (NOT SKIP_PORTABILITY_TEST))
!   add_executable(portability_test portability_test.cpp)
!   
!   add_test(NAME portability_test1 COMMAND portability_test save 64)
!   add_test(NAME portability_test2 COMMAND portability_test load 64)
!   add_test(NAME portability_test3 COMMAND portability_test remove 64)
  
  endif()
  
***************
*** 31,47 ****
      target_link_libraries(${TEST_TARGET} ${Boost_LIBRARIES})
      add_test("${TEST_TARGET}" "${TEST_TARGET}")
  
-     # TODO: This won't work right now, because we would need a 32-bit boost
-     ## If we are on a 64-bit machine, create an extra 32-bit version of the test
-     #if(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
-     #  add_executable(${TEST_TARGET}_32 ${TEST_SOURCE})
-     #  set_target_properties(${TEST_TARGET}_32 PROPERTIES 
-     #    COMPILE_DEFINITIONS "BOOST_TEST_DYN_LINK;BOOST_TEST_MODULE=${TEST_TARGET}"
-     #    COMPILE_FLAGS "-m32" LINK_FLAGS "-m32")
-     #  target_link_libraries(${TEST_TARGET}_32 ${Boost_LIBRARIES})
-     #  add_test("${TEST_TARGET}_32" "${TEST_TARGET}_32")
-     #endif()
- 
    endif()
  
  endforeach()
--- 29,34 ----
diff -c -r cereal-1.1.2.orig/unittests/map.cpp cereal-1.1.2/unittests/map.cpp
*** cereal-1.1.2.orig/unittests/map.cpp	2015-06-08 15:13:21.000000000 -0300
--- cereal-1.1.2/unittests/map.cpp	2016-03-13 15:42:03.982581300 -0300
***************
*** 103,113 ****
        BOOST_CHECK_EQUAL_COLLECTIONS(i_v_it->second.begin(), i_v_it->second.end(), o_v_it->second.begin(), o_v_it->second.end());
      }
  
!     BOOST_CHECK_EQUAL_COLLECTIONS(i_podmap.begin(),    i_podmap.end(),    o_podmap.begin(),  o_podmap.end());
!     BOOST_CHECK_EQUAL_COLLECTIONS(i_isermap.begin(),   i_isermap.end(),   o_isermap.begin(), o_isermap.end());
!     BOOST_CHECK_EQUAL_COLLECTIONS(i_isplmap.begin(),   i_isplmap.end(),   o_isplmap.begin(), o_isplmap.end());
!     BOOST_CHECK_EQUAL_COLLECTIONS(i_esermap.begin(),   i_esermap.end(),   o_esermap.begin(), o_esermap.end());
!     BOOST_CHECK_EQUAL_COLLECTIONS(i_esplmap.begin(),   i_esplmap.end(),   o_esplmap.begin(), o_esplmap.end());
    }
  }
  
--- 103,113 ----
        BOOST_CHECK_EQUAL_COLLECTIONS(i_v_it->second.begin(), i_v_it->second.end(), o_v_it->second.begin(), o_v_it->second.end());
      }
  
!     BOOST_TEST(i_podmap == o_podmap);
!     BOOST_TEST(i_isermap == o_isermap);
!     BOOST_TEST(i_isplmap == o_isplmap);
!     BOOST_TEST(i_esermap ==  o_esermap);
!     BOOST_TEST(i_esplmap == o_esplmap);
    }
  }
  
