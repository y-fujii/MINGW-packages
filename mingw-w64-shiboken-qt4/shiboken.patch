--- PySide-1.2.2/sources/shiboken/CMakeLists.txt.orig	2015-06-26 11:25:44.610800000 +0300
+++ PySide-1.2.2/sources/shiboken/CMakeLists.txt	2015-06-26 11:27:46.225600000 +0300
@@ -49,6 +49,9 @@
 if(MSVC)
     set(CMAKE_CXX_FLAGS "/Zc:wchar_t- /GR /EHsc /DWIN32 /D_WINDOWS /D_SCL_SECURE_NO_WARNINGS")
 else()
+    if(MINGW)
+        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DWIN32 -D_WINDOWS")
+    endif()
     if(CMAKE_HOST_UNIX AND NOT CYGWIN)
         set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -fvisibility=hidden -Wno-strict-aliasing")
     endif()
--- PySide-1.2.2/sources/shiboken/libshiboken/basewrapper.cpp.orig	2015-06-26 11:25:44.610800000 +0300
+++ PySide-1.2.2/sources/shiboken/libshiboken/basewrapper.cpp	2015-06-26 11:27:46.225600000 +0300
@@ -770,7 +770,7 @@
 Py_hash_t hash(PyObject* pyObj)
 {
     assert(Shiboken::Object::checkType(pyObj));
-    return reinterpret_cast<Py_hash_t>(pyObj);
+    return reinterpret_cast<uintptr_t>(pyObj);
 }
 
 static void setSequenceOwnership(PyObject* pyObj, bool owner)
--- PySide-1.2.2/sources/shiboken/shibokenmodule/CMakeLists.txt.orig	2015-06-26 07:00:25.341400000 +0300
+++ PySide-1.2.2/sources/shiboken/shibokenmodule/CMakeLists.txt	2015-06-26 07:00:39.974200000 +0300
@@ -9,7 +9,7 @@
 )
 
 add_custom_command(OUTPUT ${sample_SRC}
-COMMAND ${shibokengenerator_BINARY_DIR}/shiboken --project-file=${CMAKE_CURRENT_BINARY_DIR}/shibokenmodule.txt ${GENERATOR_EXTRA_FLAGS}
+COMMAND ${shibokengenerator_BINARY_DIR}/shiboken.exe --project-file=${CMAKE_CURRENT_BINARY_DIR}/shibokenmodule.txt ${GENERATOR_EXTRA_FLAGS}
 WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
 COMMENT "Running generator for 'shiboken'..."
 )
--- PySide-1.2.2/sources/shiboken/tests/libsample/objecttype.h.orig	2015-06-26 10:11:42.262200000 +0300
+++ PySide-1.2.2/sources/shiboken/tests/libsample/objecttype.h	2015-06-26 10:15:29.335800000 +0300
@@ -70,7 +70,7 @@
     Str objectName() const;
     void setObjectName(const Str& name);
 
-    inline unsigned long identifier() const { return reinterpret_cast<unsigned long>(this); }
+    inline unsigned long identifier() const { return reinterpret_cast<uintptr_t>(this); }
 
     bool causeEvent(Event::EventType eventType);
 
--- PySide-1.2.2/sources/shiboken/tests/libsample/transform.cpp.orig	2015-06-26 07:02:00.766600000 +0300
+++ PySide-1.2.2/sources/shiboken/tests/libsample/transform.cpp	2015-06-26 07:02:07.271800000 +0300
@@ -27,7 +27,9 @@
 #ifdef _WIN32
 #include <math.h>
 #include <float.h>
+#ifndef __MINGW64_VERSION_MAJOR
 static inline bool isfinite(double a) { return _finite(a); }
+#endif
 #else
 #include <cmath>
 #endif
--- PySide-1.2.2/sources/shiboken/generator/shiboken/overloaddata.cpp.orig	2015-06-26 10:00:46.779800000 +0300
+++ PySide-1.2.2/sources/shiboken/generator/shiboken/overloaddata.cpp	2015-06-26 10:02:01.441400000 +0300
@@ -882,7 +882,7 @@
 
         s << "}" << endl;
     } else {
-        QString argId = QString("arg_%1").arg((ulong)this);
+        QString argId = QString("arg_%1").arg((uintptr_t)this);
         s << argId << ';' << endl;
 
         s << indent << '"' << argId << "\" [shape=\"plaintext\" style=\"filled,bold\" margin=\"0\" fontname=\"freemono\" fillcolor=\"white\" penwidth=1 ";
